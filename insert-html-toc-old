#!/usr/bin/perl -w
# given an HTML document with a certain style of header and
# name information, insert a table of contents in between
# some specifically-formatted comments

use strict 'subs';

if (@ARGV == 0) {
  print(<<"EOF");
usage: $0 file.html

This script will modify file.html in-place, adding a table
of contents in between specific comments.
EOF
  exit(0);
}

$fname = $ARGV[0];

# read the file into memory
open(IN,"<$fname") or die("cannot read $fname: $!\n");
@lines = <IN>;
close(IN) or die;


# ------------------ compute TOC ----------------
# in-progress table of contents
$toc =            # text so far
  "<!-- automatically generated by insert-html-toc; do not edit the TOC directly -->\n";
$indent = 0;      # number of open <ul> blocks
$name = "";       # most recently seen <a name>

# where TOC goes
$beginContentsLine = 0;
$endContentsLine = 0;

# set of names used so far
@nameSet = ();

# look for names and headers
for ($i = 0; $i < @lines; $i++) {
  my $line = $lines[$i];
  my ($n, $str, $m);
  my $lineNo = $i+1;      # line to report in error msgs

  # name?
  ($str) =
    ($line =~ m|<a name=\"(.*)\">|);
  if (defined($str)) {
    # already used?
    if (grep(m/^$str$/, @nameSet)) {
      die("line $lineNo: duplicate use of name '$str'\n");
    }

    $name = $str;
    push @nameSet, ($str);
    next;
  }

  # header?
  ($n, $str, $m) =
    ($line =~ m|<h(\d)>(.*)</h(\d)>|);
  if (defined($m)) {
    if (!$beginContentsLine) {                             
      # have not yet seen BEGIN CONTENTS; assume that everything
      # before that is not a header that should go in the TOC (since
      # TOCs normally come *before* the headers they refer to)
      next;
    }

    if ($n != $m) {
      die("line $lineNo: mismatched header tags?\n");
    }
    if ($n < 1 || $n > 6) {
      die("line $lineNo: header tag must be h1-h6\n");
    }

    # outdent
    while ($n < $indent) {
      $indent--;
      $toc .= "  " x $indent . "</ul>\n";
    }

    # indent
    if ($n > $indent) {
      if ($n != $indent+1) {
        die("line $lineNo: indenting more than one level");
      }
      $toc .= "  " x $indent . "<ul>\n";
      $indent++;
    }

    # TOC entry
    $toc .= "  " x $indent . "<li>";
    if ($name) {
      $toc .= "<a class=\"toc\" href=\"#$name\">";
    }
    $toc .= $str;      # section label
    if ($name) {
      $toc .= "</a>";
    }
    $toc .= "\n";

    # forget $name so we only use each name once
    $name = "";

    next;
  }

  if ($line =~ m|BEGIN CONTENTS|) {
    $beginContentsLine = $i;
    next;
  }

  if ($line =~ m|END CONTENTS|) {
    $endContentsLine = $i;
    next;
  }
}

# close any open <ul>s
while (0 < $indent) {
  $indent--;
  $toc .= "  " x $indent . "</ul>\n";
}

if (!$beginContentsLine) {
  die("no BEGIN CONTENTS line found\n");
}
if (!$endContentsLine) {
  die("no END CONTENTS line found\n");
}
if (!( $beginContentsLine < $endContentsLine )) {
  die("BEGIN CONTENTS must come before END CONTENTS\n");
}


# ------------------ write file with TOC inserted --------------

# temporary
#print ($toc);
#exit(0);


# paranoia...
system("cp", "$fname", "$fname.bak");

open(OUT,">$fname") or die("cannot write $fname: $!\n");

# up to and including BEGIN CONTENTS
for ($i = 0; $i <= $beginContentsLine; $i++) {
  print OUT $lines[$i];
}

# TOC
print OUT ($toc);

# END CONTENTS and beyond
for ($i = $endContentsLine; $i < @lines; $i++) {
  print OUT $lines[$i];
}

close(OUT) or die;


# EOF
