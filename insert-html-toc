#!/usr/bin/perl -w
# insert a table of contents into an HTML document

=pod

Given an HTML document with a certain style of header and name
information, this script will insert a table of contents (TOC) in
between some specifically-formatted comments.

To use this script, first add the following lines to your HTML
document where you want the TOC to go:

  <!-- BEGIN CONTENTS -->
  <!-- END CONTENTS -->

Then, in your HTML code, use anchor and heading tags like so:

  <a name="intro"></a>
  <h1>Introduction</h1>

When you run:

  $ perl insert-html-toc your-file.html
  
this script will insert a table of contents between the special
comments above that looks something like this:

  <!-- automatically generated by insert-html-toc; do not edit the TOC directly -->
  <ul>
    <li><a class="toc" href="#intro">Introduction</a>
    <li><a class="toc" href="#input">Input (Command Line and Environment) Language</a>
    <ul>
      <li><a class="toc" href="#command_line">Command Line</a>
    </ul>
    <li><a class="toc" href="#data">Internal Data Structures</a>
    <li><a class="toc" href="#output">Output to <tt>cov-translate</tt></a>
    <li><a class="toc" href="#events">Debugger Event Loop</a>
  </ul>

The "class" is set to "toc" so you can use CSS to change the
formatting if you like.  The links point to the anchors specified
before the heading, and the link text is the same as the heading text.

The script uses <ul> (unordered/unnumbered list) instead of <ol>
(ordered/numbered list) because the latter would only number the TOC
entries themselves, not the sections in the body of the document.  I
usually just manually number the body sections; those numbers will
then be carried into the TOC where they can easily be checked for
consistency.

=cut

use strict 'subs';

if (@ARGV == 0) {
  print(<<"EOF");
usage: $0 file.html

This script will modify file.html in-place, adding a table
of contents in between specific comments.
EOF
  exit(0);
}

$fname = $ARGV[0];

# read the file into memory; use binary mode because our files
# use newlines only (even on windows), and we want to preserve that
open(IN,"<$fname") or die("cannot read $fname: $!\n");
binmode IN;
@lines = <IN>;
close(IN) or die;


# ------------------ compute TOC ----------------
# in-progress table of contents
$toc =            # text so far
  "<!-- automatically generated by insert-html-toc; do not edit the TOC directly -->\n";
$indent = 0;      # number of open <ul> blocks
$name = "";       # most recently seen <a name>

# where TOC goes
$beginContentsLine = 0;
$endContentsLine = 0;

# set of names used so far
@nameSet = ();

# look for names and headers
for ($i = 0; $i < @lines; $i++) {
  my $line = $lines[$i];
  my ($n, $str, $m);
  my $lineNo = $i+1;      # line to report in error msgs

  # name?
  ($str) =
    ($line =~ m|<a name=\"(.*)\">|);
  if (defined($str)) {
    # already used?
    if (grep($_ eq $str, @nameSet)) {
      die("line $lineNo: duplicate use of name '$str'\n");
    }

    $name = $str;
    push @nameSet, ($str);
    next;
  }

  # header?
  ($n, $str, $m) =
    ($line =~ m|<h(\d)>(.*)</h(\d)>|);
  if (defined($m)) {
    if (!$beginContentsLine) {                             
      # have not yet seen BEGIN CONTENTS; assume that everything
      # before that is not a header that should go in the TOC (since
      # TOCs normally come *before* the headers they refer to)
      next;
    }

    if ($n != $m) {
      die("line $lineNo: mismatched header tags?\n");
    }
    if ($n < 1 || $n > 6) {
      die("line $lineNo: header tag must be h1-h6\n");
    }

    # NOTE: Do not change the <ul> to <ol>.  See the rationale
    # in the pod section above.

    # outdent
    while ($n < $indent) {
      $indent--;
      $toc .= "  " x $indent . "</ul>\n";
    }

    # indent
    if ($n > $indent) {
      if ($n != $indent+1) {
        die("line $lineNo: indenting more than one level");
      }
      $toc .= "  " x $indent . "<ul>\n";
      $indent++;
    }

    # TOC entry
    $toc .= "  " x $indent . "<li>";
    if ($name) {
      $toc .= "<a class=\"toc\" href=\"#$name\">";
    }
    $toc .= $str;      # section label
    if ($name) {
      $toc .= "</a>";
    }
    $toc .= "\n";

    # forget $name so we only use each name once
    $name = "";

    next;
  }

  if ($line =~ m|BEGIN CONTENTS|) {
    $beginContentsLine = $i;
    next;
  }

  if ($line =~ m|END CONTENTS|) {
    $endContentsLine = $i;
    next;
  }
}

# close any open <ul>s
while (0 < $indent) {
  $indent--;
  $toc .= "  " x $indent . "</ul>\n";
}

if (!$beginContentsLine) {
  die("no BEGIN CONTENTS line found\n");
}
if (!$endContentsLine) {
  die("no END CONTENTS line found\n");
}
if (!( $beginContentsLine < $endContentsLine )) {
  die("BEGIN CONTENTS must come before END CONTENTS\n");
}


# ------------------ write file with TOC inserted --------------

# temporary
#print ($toc);
#exit(0);


# paranoia...
system("cp", "$fname", "$fname.bak");

# write the final file; again use binary mode so we
# just use newlines to terminate lines
open(OUT,">$fname") or die("cannot write $fname: $!\n");
binmode OUT;

# up to and including BEGIN CONTENTS
for ($i = 0; $i <= $beginContentsLine; $i++) {
  print OUT $lines[$i];
}

# TOC
print OUT ($toc);

# END CONTENTS and beyond
for ($i = $endContentsLine; $i < @lines; $i++) {
  print OUT $lines[$i];
}

close(OUT) or die;


# EOF
