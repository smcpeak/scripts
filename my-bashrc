#!/bin/sh
# .bashrc
# run at interactive bash shell startup

#echo "in .bashrc"

if [ "$PS1" != "" ]; then
  # bash prompt metacharacters
  #   \n - newline
  #   \u - username
  #   \h - hostname
  #   \w - current working directory
  #   \$ - prompt char ($ for normal user, # for root)

  # xterm control sequences:
  #   http://enterprise.aacc.cc.md.us/~rhs/ansi.html
  #   http://www.kitebird.com/csh-tcsh-book/ctlseqs.pdf

  # include an @host if I'm remotely connected
  if echo "$DISPLAY" | grep '^:' >/dev/null; then
    host=""
  else
    host="@\\h"
  fi

  # experimenting with making the prompt a different color
  #if [ "$TERM" = "xterm" ]; then
  #  magenta="[35m"
  #  cyan="[36m"
  #  white="[37m"
  #  normal="[0m"
  #  bold="[1m"
  #  underline="[4m"
  #fi
  
  # this works, but messes up bash's notion of how long the prompt string
  # is, thus causing it to mess up on long command lines
  #PS1="\\n${cyan}${PS1PREFIX}\\u${host}:\\w\\\$${white} "

  PS1="\\n${PS1PREFIX}\\u${host}:\\w\\\$ "

  # setup some sane terminal options
  #  erase: backspace
  #  kill: ? (not a process kill.. it's like kill-line I think)
  #  intr: soft-kill (normal ^C)
  #  susp: suspend process
  #  -ixon -ixoff: disable software flow control (annoying ^S/^Q thing)
  stty erase ^H kill ^K intr ^C susp ^Z -ixon -ixoff >/dev/null 2>&1
fi

# environment variables
export EDITOR=pico
export CVSROOT=~/cvsroot
#export CXX=g++
#export CXXFLAGS="-g -Wall"
export PAGER=more
export XAPPLRESDIR=~/.xapplresdir
export LD_LIBRARY_PATH=~/lib
export CVS_RSH=ssh
export PERLLIB=$HOME/.cpan:$HOME/.cpan/i386-linux
#export ELKHOUND_DEBUG=true
export SETTINGS_DIR=$HOME/settings
export COVERITY_NO_SLEEP_ON_RELEASE=1

# don't exit on ctrl-d
export IGNOREEOF=100

# path.. with /sbin after scripts, so I can have scripts with the
# same name as /sbin scripts, but which use sudo to call the /sbin
# version
export PATH=~/bin:~/scripts:$PATH:/sbin:/usr/sbin:/usr/local/sbin
export PATH=$PATH:/usr/local/jdk/bin

# default file permissions:
# user   - rwx   ~7 = 0
# group  - r x   ~5 = 2
# others - r x   ~5 = 2
umask 022

# no core files (-S: soft limit only!)
ulimit -S -c 0

# set xterm title (this used to be a separate script, but making
# it a shell function means .bashrc is self-contained)
stitle() {
  echo -n "]0;$*"
}

# e.g.: smcpeak@cork
location="`whoami`@`hostname | sed 's/\..*//'`"

# set title to name@host
ut() {
  if [ "$1" = "" ]; then
    stitle "$location"
  else
    stitle "${location}: $1"
  fi
}

# automatically set title
if [ "$DONT_STITLE" != 1 -a "$TERM" = "xterm" ]; then
  ut
  export DONT_STITLE=1
fi

# aliases
unalias rm >/dev/null 2>&1
alias   ls="ls -F"
alias   ll="ls -l"
alias   mv="mv -i"
alias   pico="pico -w"
alias   grep=grep-noerr
alias   hexdump=~/scripts/hexdump
alias   rehash="hash -r"
alias   m="./makeit"

# where does the "v=vdir" alias come from??  I don't even know
# why sometimes it's not defined, thus provoking an error message;
# I'll suppress that..
unalias v >/dev/null 2>&1

locate() {
  find . -name \*"$1"\* -print 2>&1 | egrep -v 'cannot open'\|'cannot search'
}

locatebin() {
  find `echo $PATH | 'sed s/:/ /'` / -name \*"$1"\* -print 2>&1 | egrep -v 'cannot open'\|'cannot search'
}

# -i flag to emacs tells it to use an icon
alias emacs="~/bin/emacs -i -geometry 100x37-0+25"
alias xemacs="xemacs -geometry 80x40+77+25"

# automate "make distclean; ./configure <args>; make"
# don't say '&&' after distclean, so if the Makefile is already
# gone it will be ok
reconfigure() {
  make distclean; ./configure "$@" && make
}

# print exit value for commands that exit unsuccessfully
# (I added this feature to bash's sources myself)
set -X 2>/dev/null

# disable shell mail checking
unset MAILCHECK

# working directories
cil=~/wrk/safec/cil
edg=~/wrk/safec/edg-3.0
small2=$cil/test/small2
li=~/wrk/safec/cil/test/spec95/130.li/src
go=~/wrk/safec/cil/test/spec95/099.go/src
vortex=~/wrk/safec/cil/test/spec95/147.vortex/src
m88k=~/wrk/safec/cil/test/spec95/124.m88ksim/src
ijpeg=~/wrk/safec/cil/test/spec95/132.ijpeg/src
gcc=~/wrk/safec/cil/test/spec95/126.gcc/src

parsgen=~/wrk/cplr/parsgen
ast=~/wrk/cplr/ast
smbase=~/wrk/cplr/smbase
verifier=~/wrk/cplr/verifier
elkhound=~/wrk/cplr/elkhound
elsa=~/wrk/cplr/elsa
Kettle=~/wrk/cplr/Kettle

thesis=~/wrk/cplr/thesis
structs=~/wrk/safec/cure_cpp/structs
decode=$edg/util/edg_decode
ace=~/wrk/safec/ace.edg/ace
stl=~/wrk/safec/cure_cpp/STLport/src
cce=~/wrk/safec/cure_cpp/cc_examples
cure=~/wrk/safec/cure_cpp

specs=/usr/local/escjava/lib/specs
#ftpd=~/wrk/thmprv/ftpd
ftpd=~/wrk/safec/cil/test/ftpd/ftpd
ftpd2=~/wrk/thmprv/ftpd/kmy/net/ftpd

# for ocaml stack size stuff
export OCAMLRUNPARAM='l=256M'

# don't let any single process consume >500M
#ulimit -v 500000
# unfortunately, this limit doesn't appear to be resettable, even
# though my intent is to change only the soft limit

# This was added by autopackage.  I moved it into .bashrc-site, but
# am leaving it here commented-out in the hope that if autopackage
# checks again, it will think the line is present.
#[[ -f "/home/scott/.config/autopackage/paths-bash" ]] && . "/home/scott/.config/autopackage/paths-bash"

# site-specific (should be last thing in this file)
if [ -f ~/.bashrc-site ]; then
  . ~/.bashrc-site
fi
[[ -f "/home/scott/.config/autopackage/paths-bash" ]] && . "/home/scott/.config/autopackage/paths-bash"
