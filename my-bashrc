#!/bin/sh
# .bashrc
# run at interactive bash shell startup

#echo "in .bashrc"

if [ "$PS1" != "" ]; then
  # set prompt:
  #  \n - newline
  #  \u - username
  #  \h - hostname
  #  \w - current working directory
  #  \$ - prompt char ($ for normal user, # for root)
  if echo "$DISPLAY" | grep '^:' >/dev/null; then
    # omit host name since it's local
    PS1="\n$PS1PREFIX"'\u:\w\$ '
  else
    PS1="\n$PS1PREFIX"'\u@\h:\w\$ '
  fi

  # setup some sane terminal options
  #  erase: backspace
  #  kill: ? (not a process kill.. it's like kill-line I think)
  #  intr: soft-kill (normal ^C)
  #  susp: suspend process
  #  -ixon -ixoff: disable software flow control (annoying ^S/^Q thing)
  stty erase ^H kill ^K intr ^C susp ^Z -ixon -ixoff >/dev/null 2>&1
fi

# environment variables
export EDITOR=pico
export CVSROOT=~/cvsroot

# messes up Coverity build
#export CXX=g++
#export CXXFLAGS="-g -Wall"

export PAGER=more
export XAPPLRESDIR=~/.xapplresdir
export LD_LIBRARY_PATH=~/lib
export CVS_RSH=ssh
#export CCUREDHOME=/home/scott/wrk/safec/cil

# path.. with /sbin after scripts, so I can have scripts with the
# same name as /sbin scripts, but which use sudo to call the /sbin
# version
export PATH=~/bin:~/scripts:/usr/local/bin:$PATH:/sbin:/usr/sbin:/usr/local/sbin
export PATH=$PATH:/usr/local/jdk/bin

# default file permissions:
# user   - rwx   ~7 = 0
# group  - r x   ~5 = 2
# others - r x   ~5 = 2
umask 022

# no core files
#ulimit -c 0

# e.g.: smcpeak@cork
location="`whoami`@`hostname | sed 's/\..*//'`"

if [ "$DONT_STITLE" != 1 -a "$TERM" = "xterm" ]; then
  stitle $location
  export DONT_STITLE=1
fi

# aliases
unalias rm >/dev/null 2>&1
alias   ls="ls -F"
alias   ll="ls -l"
alias   mv="mv -i"
alias   pico="pico -w"
alias   grep=grep-noerr
alias   hexdump=~/scripts/hexdump
alias   rehash="hash -r"

locate() {
  find . -name \*"$1"\* -print 2>&1 | egrep -v 'cannot open'\|'cannot search'
}

locatebin() {
  find `echo $PATH | 'sed s/:/ /'` / -name \*"$1"\* -print 2>&1 | egrep -v 'cannot open'\|'cannot search'
}

# -i flag to emacs tells it to use an icon
alias emacs="~/bin/emacs -i -geometry 100x37-0+25"
alias xemacs="xemacs -geometry 80x40+77+25"

# print exit value for commands that exit unsuccessfully
# (I added this feature to bash's sources myself)
#set -X 2>/dev/null

# actually, this can be done with PROMPT_COMMAND, an idea
# I got from:
#
#   http://blog.gnist.org/article.php?story=BashPromptWithExitStatus

# This function will be run before every prompt.  Since it is
# encapsulated in a function, upon returning, $? is restored.
# However, during the function, we have to save it since otherwise the
# '[' ('test') will overwrite it.
function exitstatus {
  EXITSTATUS="$?"
  if [ "$EXITSTATUS" -ne 0 ]; then
    echo "Exit $EXITSTATUS"
  fi
}

# establish it as the prompt command
PROMPT_COMMAND=exitstatus


# disable shell mail checking
unset MAILCHECK

# working directories
cil=~/wrk/safec/cil
small2=$cil/test/small2
li=~/wrk/safec/cil/test/spec95/130.li/src
go=~/wrk/safec/cil/test/spec95/099.go/src
vortex=~/wrk/safec/cil/test/spec95/147.vortex/src
m88k=~/wrk/safec/cil/test/spec95/124.m88ksim/src
ijpeg=~/wrk/safec/cil/test/spec95/132.ijpeg/src
gcc=~/wrk/safec/cil/test/spec95/126.gcc/src

parsgen=~/wrk/cplr/parsgen
ast=~/wrk/cplr/ast
smbase=~/wrk/lib/smbase
thesis=~/wrk/cplr/thesis

specs=/usr/local/escjava/lib/specs
#ftpd=~/wrk/thmprv/ftpd
ftpd=~/wrk/safec/cil/test/ftpd/ftpd
ftpd2=~/wrk/thmprv/ftpd/kmy/net/ftpd

# for ocaml stack size stuff
export OCAMLRUNPARAM='l=256M'

# ignore interactive ctrl-D (EOF)
export IGNOREEOF=10

# personal perl modules
export PERL5LIB=$HOME/lib/perl

# site-specific (should be last thing in this file)
if [ -f ~/.bashrc-site ]; then
  . ~/.bashrc-site
fi
