#!/usr/bin/env python3

"""Convert CSV input into HTML table markup.

Given input like:

  a,b,c
  d,e,f
  g,h,i

Produce output:

  <table>
    <tr>
      <td>a
      <td>b
      <td>c
    <tr>
      <td>d
      <td>e
      <td>f
    <tr>
      <td>g
      <td>h
      <td>i
  </table>
"""


import csv                   # reader
import html                  # escape
import re                    # compile
import sys                   # argv

class Error(Exception):
  """A condition to be treated as an error."""
  pass

def htmlEscape(str):
  return html.escape(str)


# If true, make the first row a heading row.
firstRowHeading = False

numericPattern = re.compile(r"^[0-9][0-9.,]*$")


try:

  programName = sys.argv[0]

  # Process options.
  idx = 1
  while idx < len(sys.argv) and sys.argv[idx].startswith("-"):
    option = sys.argv[idx]
    idx += 1

    if option == "--heading":
      firstRowHeading = True

    else:
      raise Error(f"unknown option: {option}")

  reader = csv.reader(sys.stdin)

  print("<table>")

  # Iterate over rows.
  for fields in reader:
    # Begin a new output row.
    print("  <tr>")

    # Tag to use for cells in this row.
    cellTag = "td"
    if firstRowHeading:
      cellTag = "th"
      firstRowHeading = False

    # Iterate over cells.
    for cell in fields:
      htmlCell = htmlEscape(cell)
      if numericPattern.match(htmlCell):
        print(f'    <{cellTag} class="numeric">{htmlCell}')
      else:
        print(f"    <{cellTag}>{htmlCell}")

    print("")

  print("</table>")

except Error as e:
  print("Error: "+e.args[0])
  sys.exit(2)

except IOError as e:
  if e.filename:
    print("Error: "+e.filename+": "+e.strerror)
  else:
    print("Error: "+e.strerror)
  sys.exit(2)


# EOF
