#!/usr/bin/perl -w
# run gcov, but filter its output a bit
#
# This processes gcov output, filtering out lines that are not
# interesting for coverage purposes.  Specifically, these sorts of lines
# are not counted:
#
# * Lines containing "gcov-begin-ignore" and "gcov-end-ignore", and
#   all lines between such a pair.
#
# * Lines containing "gcov-ignore".
#
# * Lines matching any of the other regular expressions appearing in
#   the @ignoreRegexps list, below.

use strict 'subs';

@ignoreRegexps = (
  # Explicit directive to ignore coverage for one line.
  "gcov-ignore",

  # Functions that abort execution on paths that are "impossible".
  "xfailure",
  "xunimp",
  "abort\\s*\\(",
  "assert\\s*\\(\\s*!\\s*\"",       # assert(!"impossible")
  "av_failure",
  "av_abort",

  # Heuristically, if we are printing to stderr, we are probably
  # reporting some sort of unusual error.  I will ignore this too,
  # since most likely there is something else interesting in the
  # same code block if this should not be ignored.
  "fprintf\\s*\\(\\s*stderr\\s*,",

  # A comment placed on a line of code present only to silence a
  # compiler warning, but that is not actually executable.
  "silence warning",
  "[nN]ot reached",

  # Regexp of lines where it's irrelevant if executed.  These are
  # for lines that might appear to be not covered simply because
  # (for example) a macro expands to a 'break' statement that is
  # not reachable.  There will always be a more relevant statement
  # nearby whose coverage will be what I want to measure.
  "ASTCASE",
  "ASTNEXT",
  "ASTDEFAULT",
  "ASTENDCASE",

  # There is (was?) a bug in gcc/gcov where a "catch" statement is
  # always marked "######" even when the handler it guards *is*
  # executed.
  "catch\\s*\\(",
);

sub usage {
  print("usage: $0 [-q] filename.cc [file2.cc [...]]\n");
  print("  -q: only print stats for explicitly named filenames\n");
}

$quiet = 0;

while (@ARGV > 0 && $ARGV[0] =~ m/^-/) {
  if ($ARGV[0] eq "-q") {
    $quiet++;
  }
  else {
    usage();
    die("unknown option: $ARGV[0]\n");
  }

  shift @ARGV;
}

if (@ARGV == 0) {
  usage();
  exit(0);
}

@filenames = @ARGV;


$pid = open(KID, "-|");
if (!defined($pid)) {
  die("fork: $!\n");
}

if (!$pid) {  # child
  exec("gcov", @ARGV)
    || die("can't exec gcov: $!\n");
}

# read all of gcov's output before doing anything, because
# when it says "Creating ..." it is *not* finished creating
# that file, hence I will have a race condition if I try
# to do it online
@gcovOutput = <KID>;

if (!close(KID)) {
  # exit with same status
  $exit_value  = $? >> 8;
  $signal_num  = $? & 127;
  if ($exit_value) {
    exit($exit_value);
  }
  else {
    warn("gcov died with signal $signal_num\n");
    exit(10);
  }
}


# check for one condition early
@unexpected = grep {/^Unexpected/} @gcovOutput;
if (@unexpected) {
  print(join('\n', @unexpected));
  print("(perhaps you need to recompile?)\n");
  exit(4);
}


# if $execCount is the '#####' marker, replace it with a zero;
# this is so I do not completely lose the count, but the marker
# is also not present (because it is a false alarm)
sub killHashes {
  my ($execCount) = @_;

  if ($execCount =~ m/\#/) {
    # Replace with a right-aligned 0.
    return " " x (length($execCount)-1) . "0";
  }

  return $execCount;
}


# process the gcov output
foreach my $line (@gcovOutput) {
  if ($line =~ m/^Creating '(.*)'[\r]?$/) {
    my $fname = $1;
    print("Processing $fname\n");

    # read the whole thing in advance so I can write it anew
    if (!open(IN, "<", $fname)) {
      die("cannot read $fname: $!\n");
    }
    my @input = <IN>;
    close(IN) or die;

    # begin writing it
    if (!open(OUT, ">", $fname)) {
      die("cannot write $fname: $!\n");
    }

    my $lines = 0;       # total # of executable lines
    my $hit = 0;         # lines that were executed
    my $lineNum = 0;     # line number for complaining
    my $ignoring = 0;    # are we in a gcov-begin/end-ignore section?

    foreach my $text (@input) {
      $lineNum++;

      # Parse the line.
      my ($pad1, $execCount, $pad2, $codeLineNumber, $codeLine) =
        ($text =~ m/^(\s*)([0-9#-]+):(\s*)([0-9]+):(.*)$/);
      if (!defined($codeLine)) {
        die("$fname:$lineNum: line not in expected format\n");
      }
      chomp($codeLine);

      # ignoring?
      if ($ignoring) {
        if ($codeLine =~ m/gcov-end-ignore/) {
          $ignoring--;
        }
        $execCount = killHashes($execCount);
      }

      # begin ignoring?
      elsif ($codeLine =~ m/gcov-begin-ignore/) {
        $ignoring++;
        $execCount = killHashes($execCount);
      }

      # Ignore just this line?
      elsif (shouldIgnoreLine($codeLine)) {
        $execCount = killHashes($execCount);
      }

      # Analyze $execCount.
      elsif ($execCount =~ m/\d/) {
        # executable and hit
        $lines++;
        $hit++;
      }
      elsif ($execCount =~ m/\#/) {
        # executable but not hit
        $lines++;
      }
      elsif ($execCount eq "-") {
        # line is not executable
      }
      else {
        warn("$fname:$lineNum: execution count not understood: $execCount\n");
      }

      # Print the line, possibly with modified $pad1 and $execCount.
      print OUT ($pad1, $execCount, ":",
                 $pad2, $codeLineNumber, ":",
                 $codeLine, "\n");
    }

    close(OUT) or die;

    # print a report on the statistics for this file
    if (shouldShowReport($fname)) {
      my $pct = 0;
      if ($lines) {
        $pct = $hit / $lines * 100.0;
      }
      printf("%7.2f%s = %5d of %5d lines: %s\n",
             $pct, "%", $hit, $lines, $fname);
    }
  }

  # ignore other kind of output
}


# Return true if $codeLine matches any of the @ignoreRegexps.
sub shouldIgnoreLine {
  my ($codeLine) = @_;

  for my $regex (@ignoreRegexps) {
    if ($codeLine =~ m/$regex/) {
      return 1;
    }
  }

  return 0;
}


sub shouldShowReport {
  my ($fname) = @_;

  if ($quiet == 0) {
    return 1;
  }

  foreach $fn (@filenames) {
    if ($fname =~ m/$fn/) {
      return 1;
    }
  }

  return 0;
}


# EOF
