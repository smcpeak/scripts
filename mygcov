#!/usr/bin/perl -w
# run gcov, but filter its output a bit
#
# Mainly, this filters out reports for lines that are not intended to
# be executed, such as those containing "xfailure".

use strict 'subs';

sub usage {
  print("usage: $0 [-q] filename.cc [file2.cc [...]]\n");
  print("  -q: only print stats for explicitly named filenames\n");
}

$quiet = 0;

while (@ARGV > 0 && $ARGV[0] =~ m/^-/) {
  if ($ARGV[0] eq "-q") {
    $quiet++;
  }
  else {
    usage();
    die("unknown option: $ARGV[0]\n");
  }

  shift @ARGV;
}

if (@ARGV == 0) {
  usage();
  exit(0);
}

@filenames = @ARGV;


# Regexp of lines that are not expected to executed.
$nonexec = "xfailure|silence warning|xunimp";

# Regexp of lines where it's irrelevant if executed.  These are
# for lines that might appear to be not covered simply because
# (for example) a macro expands to a 'break' statement that is
# not reachable.  There will always be a more relevant statement
# nearby whose coverage will be what I want to measure.
#
# The reason "catch" is in here is there is a bug in gcc/gcov
# where a "catch" statement is always marked "######" even when
# the handler it guards *is* executed.
$irrelevant = "ASTCASE|ASTNEXT|ASTDEFAULT|ASTENDCASE|gcov-ignore|catch\\s*\\(";


$pid = open(KID, "-|");
if (!defined($pid)) {
  die("fork: $!\n");
}

if (!$pid) {  # child
  exec("gcov", @ARGV)
    || die("can't exec gcov: $!\n");
}

# read all of gcov's output before doing anything, because
# when it says "Creating ..." it is *not* finished creating
# that file, hence I will have a race condition if I try
# to do it online
@gcovOutput = <KID>;

if (!close(KID)) {
  # exit with same status
  $exit_value  = $? >> 8;
  $signal_num  = $? & 127;
  if ($exit_value) {
    exit($exit_value);
  }
  else {
    warn("gcov died with signal $signal_num\n");
    exit(10);
  }
}


# check for one condition early
@unexpected = grep {/^Unexpected/} @gcovOutput;
if (@unexpected) {
  print(join('\n', @unexpected));
  print("(perhaps you need to recompile?)\n");
  exit(4);
}


# if $leading is the '######' marker, replace it with a zero;
# this is so I do not completely lose the count, but the marker
# is also not present (because it is a false alarm)
sub killHashes {
  my ($leading) = @_;

  if ($leading =~ m/\#/) {
    $leading = (" " x 11) . "0    ";
  }

  return $leading;
}


# process the gcov output
foreach my $line (@gcovOutput) {
  if ($line =~ m/^Creating (.*)\.$/) {
    my $fname = $1;

    # read the whole thing in advance so I can write it anew
    if (!open(IN, "<", $fname)) {
      die("cannot read $fname: $!\n");
    }
    my @input = <IN>;
    close(IN) or die;

    # begin writing it
    if (!open(OUT, ">", $fname)) {
      die("cannot write $fname: $!\n");
    }

    my $lines = 0;       # total # of executable lines
    my $hit = 0;         # lines that were executed
    my $lineNum = 0;     # line number for complaining
    my $xfailures = 0;   # lines matching $nonexec that were called
    my $ignoring = 0;    # are we in a gcov-begin/end-ignore section?

    foreach my $text (@input) {
      $lineNum++;

      # split off execution count
      my $leading;
      my $trailing;
      ($leading, $trailing) =
        ($text =~ m/^(\t{2})(.*)$/);       # might be two tabs
      if (!defined($trailing)) {
        ($leading, $trailing) =
          ($text =~ m/^(.{16})(.*)$/);     # or 16 chars
        if (!defined($trailing)) {
          die("$fname:$lineNum: not 16 chars?!\n");
        }
      }
      chomp($trailing);

      # ignoring?
      if ($ignoring) {
        if ($trailing =~ m/gcov-end-ignore/) {
          $ignoring--;
        }
        $leading = killHashes($leading);
      }

      # begin ignoring?
      elsif ($trailing =~ m/gcov-begin-ignore/) {
        $ignoring++;
        $leading = killHashes($leading);
      }

      # is the code non-executable?
      elsif ($trailing =~ m/$nonexec/) {
        # was it executed?
        if ($leading =~ m/\d/) {
          $xfailures++;            # strange..
          $leading = substr($leading, 0, 12) . " XX ";
        }
        else {
          $leading = killHashes($leading);
        }
      }

      # is it irrelevant if the code is executed?
      elsif ($trailing =~ m/$irrelevant/) {
        $leading = killHashes($leading);
      }

      # analyze 'leading'
      elsif ($leading =~ m/^\s+$/) {
        # line is not executable
      }
      elsif ($leading =~ m/\d/) {
        # executable and hit
        $lines++;
        $hit++;
      }
      elsif ($leading =~ m/\#/) {
        # executable but not hit
        $lines++;
      }
      else {
        warn("$fname:$lineNum: leading text not understood: $leading\n");
      }

      # print the line (possibly with modified $leading)
      print OUT ($leading, $trailing, "\n");
    }

    close(OUT) or die;

    # print a report on the statistics for this file
    if (shouldShowReport($fname)) {
      my $pct = 0;
      if ($lines) {
        $pct = $hit / $lines * 100.0;
      }
      printf("%7.2f%s = %5d of %5d lines: %s%s\n", $pct, "%", $hit, $lines, $fname,
             ($xfailures? " (and $xfailures xfailures!)" : ""));
    }
  }

  # ignore other kind of output
}


sub shouldShowReport {
  my ($fname) = @_;

  if ($quiet == 0) {
    return 1;
  }

  foreach $fn (@filenames) {
    if ($fname =~ m/$fn/) {
      return 1;
    }
  }

  return 0;
}


# EOF
