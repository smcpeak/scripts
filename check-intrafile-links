#!/usr/bin/env python3
"""
Check an HTML file's intra-file links.
"""

import argparse              # argparse
import os                    # os.getenv
import re                    # re.compile
import signal                # signal.signal
import sys                   # sys.argv, sys.stderr


# -------------- BEGIN: boilerplate -------------
# These are things I add at the start of every Python program to
# allow better error reporting.

# Positive if debug is enabled, with higher values enabling more printing.
debugLevel = 0
if (os.getenv("DEBUG")):
  debugLevel = int(os.getenv("DEBUG"))

def debugPrint(str):
  """Debug printout when DEBUG >= 2."""
  if debugLevel >= 2:
    print(str)

# Ctrl-C: interrupt the interpreter instead of raising an exception.
signal.signal(signal.SIGINT, signal.SIG_DFL)

class Error(Exception):
  """A condition to be treated as an error."""
  pass

def die(message):
  """Throw a fatal Error with message."""
  raise Error(message)

def exceptionMessage(e):
  """Turn exception 'e' into a human-readable message."""
  t = type(e).__name__
  s = str(e)
  if s:
    return f"{t}: {s}"
  else:
    return f"{t}"

def call_main():
  """Call main() and catch exceptions."""
  try:
    main()

  except SystemExit as e:
    raise      # Let this one go, otherwise sys.exit gets "caught".

  except BaseException as e:
    print(f"{exceptionMessage(e)}", file=sys.stderr)
    if (debugLevel >= 1):
      traceback.print_exc(file=sys.stderr)
    sys.exit(2)
# --------------- END: boilerplate --------------


def main():
  # Parse command line.
  parser = argparse.ArgumentParser()
  parser.add_argument("htmlfile",
    help="HTML file to check.")
  opts = parser.parse_args()
  htmlfile = opts.htmlfile

  # Match an anchor specified as an 'id' tag with double quotes.
  anchorRE = re.compile(r'id="([^"]+)"')

  # Scan for anchors.
  anchors = {}
  with open(htmlfile) as f:
    for line in f:
      for m in re.finditer(anchorRE, line):
        anchor = m.group(1)
        anchors[anchor] = True

  # Match a link specified as an 'href' tag with double quotes.
  hrefRE = re.compile(r'href="([^"]+)"')

  # Number of errors found.
  numErrors = 0

  # Scan the file again looking for links.
  with open(htmlfile) as f:
    lineNumber = 0
    for line in f:
      lineNumber += 1
      for m in re.finditer(hrefRE, line):
        link = m.group(1)

        if link[0] == "#":
          anchor = link[1:]
          if anchor not in anchors:
            print(f"{htmlfile}:{lineNumber}: Anchor '{anchor}' not found.")
            numErrors += 1

        elif "." not in link and "/" not in link:
          # Real links to other files or hosts almost always have a dot
          # or slash.  A missing dot likely means this was intended to
          # be an intra-file link, but the '#' was forgotten.
          print(f"{htmlfile}:{lineNumber}: Link '{link}' does not have a dot or slash.")
          numErrors += 1

  print(f"link problems found: {numErrors}")
  if numErrors > 0:
    exit(2)
  else:
    exit(0)


call_main()


# EOF
