#!/usr/bin/env python2
# read a CSV, output SQL insert statements

import csv                   # csv.reader
import re                    # re.match
import sys                   # sys.argv

class Error(Exception):
  """A condition to be treated as an error."""
  pass

# name of table to insert into
tableName = ""

def usage():
  print(sys.argv[0]+""" [options] < input.csv > output.sql

Where <options> include:
  -table <table>    Specify SQL table name; required.""")

def die(msg):
  raise Error(msg)  

try:
  
  i = 1
  while i < len(sys.argv):
    opt = sys.argv[i]

    if opt == "-table":
      if i+1 < len(sys.argv):
        tableName = sys.argv[i+1]
        i = i+1
      else:
        die("argument required for the -table option")
    else:
      usage()
      die("unknown option: "+opt)

    i = i+1

  if tableName == "":
    usage()
    die("must specify -table\n")

  reader = csv.reader(sys.stdin)

  # skip the header line
  for fields in reader:
    break

  # process the data lines
  for fields in reader:
    sys.stdout.write("INSERT INTO "+tableName+" VALUES(")

    ct = 0
    for f in fields:
      # Insert a comma between values.
      if ct > 0:
        sys.stdout.write(", ")
      ct = ct+1

      # Map empty values to NULL.  This might not be what we really
      # want, but it is easier to clean the data after it is in the
      # database.
      if f == "":
        sys.stdout.write("NULL")

      # Assume that fields consisting entirely of digits (or period) are
      # meant to be SQL integers, and hence should not be
      # quoted.  (Unfortunately, the Python CSV module cannot
      # tell me if these digits were double-quoted in the
      # original file...).
      elif re.match("^[0-9.]+$", f):     # blah ... "
        # Write without quoting.
        sys.stdout.write(f)
        
      else:
        # SQL quote as string.
        qf = f.replace("'", "''")
        sys.stdout.write("'"+qf+"'")

    sys.stdout.write(");\n")

except Error as e:
  print("Error: "+e.args[0])
  sys.exit(2)

except IOError as e:
  if e.filename:
    print("Error: "+e.filename+": "+e.strerror)
  else:
    print("Error: "+e.strerror)
  sys.exit(2)

# EOF
