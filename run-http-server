#!/usr/bin/env python3
"""Run a web server in current directory on port 8080"""

import argparse              # argparse
import http.server           # http.server.SimpleHTTPRequestHandler
import os                    # os.getenv
import re                    # re.compile
import signal                # signal.signal
import socketserver          # socketserver.TCPServer
import subprocess            # subprocess.run
import sys                   # sys.argv, sys.stderr
import time                  # time.sleep
import traceback             # traceback.print_exc


# -------------- BEGIN: boilerplate -------------
# These are things I add at the start of every Python program to
# allow better error reporting.

# Positive if debug is enabled, with higher values enabling more printing.
debugLevel = 0
if (os.getenv("DEBUG")):
  debugLevel = int(os.getenv("DEBUG"))

def debugPrint(str):
  """Debug printout when DEBUG >= 2."""
  if debugLevel >= 2:
    print(str)

# Ctrl-C: interrupt the interpreter instead of raising an exception.
signal.signal(signal.SIGINT, signal.SIG_DFL)

class Error(Exception):
  """A condition to be treated as an error."""
  pass

def die(message):
  """Throw a fatal Error with message."""
  raise Error(message)

def exceptionMessage(e):
  """Turn exception 'e' into a human-readable message."""
  t = type(e).__name__
  s = str(e)
  if s:
    return f"{t}: {s}"
  else:
    return f"{t}"

def call_main():
  """Call main() and catch exceptions."""
  try:
    main()

  except SystemExit as e:
    raise      # Let this one go, otherwise sys.exit gets "caught".

  except BaseException as e:
    print(f"{exceptionMessage(e)}", file=sys.stderr)
    if (debugLevel >= 1):
      traceback.print_exc(file=sys.stderr)
    sys.exit(2)
# --------------- END: boilerplate --------------


def main():
  # Parse command line.
  parser = argparse.ArgumentParser()
  parser.add_argument("--port", type=int, default=8080,
    help="Port to listen to.")
  opts = parser.parse_args()

  handler = http.server.SimpleHTTPRequestHandler

  # Override common text file extensions to use text/plain since
  # Firefox insists on only saving other types as files.
  extensions = [
    # The empty extension is used for 'Makefile' and 'configure'.
    "",

    ".c",
    ".cc",
    ".h",
    ".mk",
    ".pl",
    ".py",
    ".sh",
  ]
  for ext in extensions:
    handler.extensions_map[ext] = "text/plain"

  print(f"Serving at port {opts.port}.")
  with socketserver.TCPServer(("", opts.port), handler) as httpd:
    httpd.serve_forever()

call_main()


# EOF
