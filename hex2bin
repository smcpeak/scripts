#!/usr/bin/env python3
# dump standard input or file that is hex (like bin2hex output) as binary

import sys                   # sys.argv
import os                    # os.write
import traceback             # traceback.print_exc

class Error(Exception):
  """A condition to be treated as an error."""
  pass

# Throw a fatal error with message.
def die(message):
  raise Error(message)

# Given an ASCII code point, if it is a hexadecimal digit, return its
# digit value as an integer in [0,15].  Otherwise return -1.
def hexDigitToNumber(n):
  if ord("0") <= n and n <= ord("9"):
    return (n - ord("0"))
  elif ord("A") <= n and n <= ord("F"):
    return 10 + (n - ord("A"))
  elif ord("a") <= n and n <= ord("f"):
    return 10 + (n - ord("a"))
  else:
    return -1

def hex2bin(inputFile):
  data = inputFile.read()

  # True if we are in a comment.
  inComment = False

  # Value being accumulated.
  acc = 0
  accChars = 0

  for c in data:
    if not isinstance(c, int):
      # Apparently I get integers when reading from a file,
      # and characters when reading from stdin?
      c = ord(c)

    if inComment:
      if c == 10:
        # Comment ends on newline.
        inComment = False

    elif c == 35:
      # Comment starts with '#'.
      inComment = True

    else:
      num = hexDigitToNumber(c)

      if num >= 0:
        acc = (acc << 4) + num
        accChars += 1

      # Once we have two digits or a non-digit, flush the
      # accumulator
      if accChars == 2 or (accChars > 0 and num == -1):
        os.write(1, bytearray([acc]))
        acc = 0
        accChars = 0

  if accChars > 0:
    os.write(1, bytearray([acc]))

  # TODO: Input validation, "comments".

try:
  if len(sys.argv) > 2:
    print("usage: "+sys.argv[0]+" file")
    sys.exit(2)

  if len(sys.argv) == 2:
    with open(sys.argv[1], "rt") as inputFile:
      hex2bin(inputFile)
  else:
    hex2bin(sys.stdin)

  sys.exit(0)

except Error as e:
  print("Error: "+e.args[0], file=sys.stderr)
  sys.exit(2)

except SystemExit as e:
  raise      # let this one go

except:
  print("Error: "+str(sys.exc_info()[1]), file=sys.stderr)
  traceback.print_exc(file=sys.stderr)       # tmp
  sys.exit(2)


# EOF
