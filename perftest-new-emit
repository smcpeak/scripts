#!/usr/bin/perl -w
# do a build test on the new emit

use strict;
use Time::HiRes qw( gettimeofday );

my $platform = `get-cov-platform`;
die if ($?);
chomp($platform);

my $HOME = $ENV{'HOME'};

my $OLDPREV = "$HOME/prevent-4.3-unmod/objs/$platform/root";
my $NEWPREV = "$HOME/prevent-new-emit/objs/$platform/root";

# extra arguments to pass to 'make'
my $makeArgs = "";

# config
my $oldConfig = "$OLDPREV/gcc-config/coverity_config.xml";
my $newConfig = "$NEWPREV/gcc-config/coverity_config.xml";

# build command
my $make = "make";
my $makeClean = "make clean";

if (-f "compile-commands.sh") {
  $make = "sh compile-commands.sh";
  $makeClean = "true";    # no need to clean for non-incremental builds
}

my $covBuildArgs = "";

# true to run the old emit
my $runOldEmit = 1;

# local customizations?
if (-f "perftest.local.pl") {
  my $cust = `cat perftest.local.pl`;
  die if ($?);
  eval($cust);
  if ($@) {
    die($@);
  }
}

# command line arguments
while (@ARGV) {
  my $opt = shift @ARGV;
  if ($opt eq "-no-old") {
    $runOldEmit = 0;
  }
  else {
    die("unknown option: $opt\n");
  }
}


my $oldConfigArg = makeConfigArg($oldConfig);
my $newConfigArg = makeConfigArg($newConfig);


# ----------------------------- native build ----------------------------
print("native build\n");
run("$makeClean");
my $nativeBuildTime = timeRun("$make");
my $nativeBuildSize = `find-sum-sizes '*.o'`;         # bytes
die if ($?);
$nativeBuildSize = int($nativeBuildSize / 1000000);   # MB

# ------------------------------- new emit ------------------------------
print("new emit build\n");
my $newEmitVer = getVersion("$NEWPREV/bin/cov-analyze");
run("$makeClean");
run("rm -rf dir-newemit");
my $newEmitBuildTime = timeRun("$NEWPREV/bin/cov-build $newConfigArg " .
  "--dir dir-newemit $covBuildArgs $make");
my $newEmitSize = getDirSize("dir-newemit/c/emit");
my $newEmitTUs = getTUs("dir-newemit");

print("new emit analysis\n");
my $newEmitAnalysisTime = timeRun("$NEWPREV/bin/cov-analyze --dir dir-newemit");
my @newEmitStats = getAnalysisStats("dir-newemit");

print("new emit commit\n");
my @newEmitCommit = getCommitStats($NEWPREV, "dir-newemit");

my $newStatsString = printStats(@newEmitStats);
my $newCommitStatsString = printCommitStats(@newEmitCommit);

# ------------------------------- old emit ------------------------------
my $oldEmitVer = "";
my $oldEmitBuildTime = "";
my $oldEmitSize = "";
my $oldEmitTUs = "";
my $oldEmitAnalysisTime = "";
my $oldStatsString = "";
my $oldCommitStatsString = "";

if ($runOldEmit) {
  print("old emit build\n");
  $oldEmitVer = getVersion("$OLDPREV/bin/cov-analyze");
  run("$makeClean");
  run("rm -rf dir-oldemit");
  $oldEmitBuildTime = timeRun("$OLDPREV/bin/cov-build $oldConfigArg " .
    "--dir dir-oldemit $covBuildArgs $make");
  $oldEmitSize = getDirSize("dir-oldemit/c/emit");
  $oldEmitTUs = getTUs("dir-oldemit");

  print("old emit analysis\n");
  $oldEmitAnalysisTime = timeRun("$OLDPREV/bin/cov-analyze --dir dir-oldemit");
  my @oldEmitStats = getAnalysisStats("dir-oldemit");
  $oldStatsString = printStats(@oldEmitStats);

  print("old emit commit\n");
  my @oldEmitCommit = getCommitStats($OLDPREV, "dir-oldemit");
  $oldCommitStatsString = printCommitStats(@oldEmitCommit);
}

# ------------------------------- summary -------------------------------

open(OUT, ">perftest.csv") or die("cannot open perftest.csv: $!\n");
print OUT (<<"EOF");
"Native build time (s):        ", $nativeBuildTime
"Native build size (MB):       ", $nativeBuildSize

"New emit version:             ", $newEmitVer
"New emit build time (s):      ", $newEmitBuildTime
"New emit build size (MB):     ", $newEmitSize
"New emit translation units:   ", $newEmitTUs
"New emit analysis time (s):   ", $newEmitAnalysisTime
$newStatsString
$newCommitStatsString

EOF

if ($runOldEmit) {
  print OUT (<<"EOF");
"Old emit version:             ", $oldEmitVer
"Old emit build time (s):      ", $oldEmitBuildTime
"Old emit build size (MB):     ", $oldEmitSize
"Old emit translation units:   ", $oldEmitTUs
"Old emit analysis time (s):   ", $oldEmitAnalysisTime
$oldStatsString
$oldCommitStatsString

EOF
}

close(OUT) or die;

sub printStats {
  my ($loc, $files, $funcs, $paths, $defects, $memouts, $pathouts, $crashes) = @_;

  my ($ret) = (<<"EOF");
"                      LOC     ", $loc
"                      Files   ", $files
"                      Funcs   ", $funcs
"                      Paths   ", $paths
"                      Defects ", $defects
"                      Memouts ", $memouts
"                      Pathouts", $pathouts
"                      Crashes ", $crashes
EOF

  # remove final newline
  chomp($ret);

  return $ret;
}

sub printCommitStats {
  my ($first, $second, $size) = @_;

  my ($ret) = (<<"EOF");
"     First commit (s)         ", $first
"     Second commit (s)        ", $second
"     GUI DB size (MB)         ", $size
EOF

  # remove final newline
  chomp($ret);

  return $ret;
}

run("cat perftest.csv");

exit(0);


sub run {
  print("@_\n");
  my $code = system(@_);
  if ($code != 0) {
    if (($code & 0xFF) == 0) {
      $code = $code >> 8;
      die("$_[0] exited with code $code\n");
    }
    else {
      die("$_[0] exited with signal $code\n");
    }
  }
}


# run it, and return elapsed seconds
sub timeRun {
  run("sync");

  my @before = gettimeofday();

  run(@_);

  my @after = gettimeofday();

  return $after[0] - $before[0];
}


# pass --ident and extract the version
sub getVersion {
  my ($cmd) = @_;
  
  my $ver = `$cmd --ident`;
  die if ($?);
  my ($n) = ($ver =~ m/build (\d+)/);
  if (!defined($n)) {
    die("malformed version: $ver\n");
  }
  return $n;
}


# return directory size in MB
sub getDirSize {
  my ($dir) = @_;

  my $tmp = `du $dir | awk '{ print \$1 }' | tail -1`;
  die if ($?);
  chomp($tmp);
  return int($tmp / 1000);
}


# return analysis stats from analysis log
sub getAnalysisStats {
  my ($dir) = @_;

  my $loc = "unk";
  my $files = "unk";
  my $funcs = "unk";
  my $paths = "unk";
  my $defects = "unk";
  my $memouts = "unk";
  my $pathouts = "unk";
  my $crashes = 0;

  open(IN, "zcat $dir/c/output/analysis-log.txt.gz |") or die("cannot open analysis log\n");
  my $line;
  while (defined($line = <IN>)) {
    my $n;

    ($n) = ($line =~ m/LoC input to cov-analyze\s*: (\d+)/);
    if (defined($n)) {
      $loc = $n;
    }

    ($n) = ($line =~ m/status: Files analyzed\s*: (\d+)/);
    if (defined($n)) {
      $files = $n;
    }

    ($n) = ($line =~ m/status: Functions analyzed\s*: (\d+)/);
    if (defined($n)) {
      $funcs = $n;
    }

    ($n) = ($line =~ m/status: Paths analyzed\s*: (\d+)/);
    if (defined($n)) {
      $paths = $n;
    }

    ($n) = ($line =~ m/defects found\s*: (\d+)/);
    if (defined($n)) {
      $defects = $n;
    }

    ($n) = ($line =~ m/out_of_memory count: (\d+)/);
    if (defined($n)) {
      $memouts = $n;
    }

    ($n) = ($line =~ m/paths_exceeded count: (\d+)/);
    if (defined($n)) {
      $pathouts = $n;
    }
    
    if ($line =~ m/The analysis was restarted once/) {
      $crashes = 1;
    }
    
    ($n) = ($line =~ m/The analysis was restarted (\d+) times/);
    if (defined($n)) {
      $crashes = $n;
    }
  }
  close(IN) or die("zcat failed to read analysis log\n");

  return ($loc, $files, $funcs, $paths, $defects, $memouts, $pathouts, $crashes);
}


sub getTUs {
  my ($dir) = @_;
  
  my $line = `grep 'are ready for analysis' $dir/build-log.txt`;
  my ($n) = ($line =~ m/(\d+) compilation units/);
  if (!defined($n)) {
    die("could not find # of TUs; line=$line\n");
  }
  return $n;
}


sub isWindows {
  return $platform eq "mingw";
}


# given the name of a config file or "", return "-c <config>" or the
# empty string in the latter case
sub makeConfigArg {
  my ($config) = @_;
  
  if ($config eq "") {
    return "";
  }
  
  # catch any old-style config vars
  if ($config =~ m/^-c/) {
    die("config \"$config\" begins with \"-c\" but should not\n");
  }
  
  # on Windows we need to convert from a cygwin path
  if (isWindows()) {
    $config = `cygpath -m $config`;
    die if ($?);
    chomp($config);
  }

  return "-c $config";
}


sub getCommitStats {
  my ($prev, $dir) = @_;

  run("rm -rf tmpdata");

  # install DB
  run("$prev/bin/cov-install-gui -d tmpdata --use-service no " .
        "--password admin --product default --language 'C/C++'");

  # first commit
  my $cmd = "$prev/bin/cov-commit-defects -d tmpdata --dir $dir --user admin";
  my $first = timeRun($cmd);

  # second commit
  my $second = timeRun($cmd);

  my $size = getDirSize("tmpdata");

  run("rm -rf tmpdata");

  return ($first, $second, $size);
}


# EOF
