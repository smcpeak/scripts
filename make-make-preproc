#!/usr/bin/perl -w
# given a make log on stdin, create a script (on stdout) which will
# make the preprocessed C++ sources

if (-t STDIN) {
  usage();
  exit(0);
}

sub usage {
  print(<<"EOF");
usage: $0 [options] <make.out >make-preproc

This translates a make log into a script for making preprocessed
versions of all the input files used.

options include -I and -D options to add to the command line.
EOF
}
       
# just put all the arguments into the command line
$extras = join(' ', @ARGV);
$cwd = `pwd`;
chomp($cwd);

print (<<"EOF");
#!/bin/sh
# generated by
#   $0 $extras
# when run in
#   $cwd

EOF

# directory stack of 'make' invocations
@dirStack = ($cwd);

# directory we're currently in
$curDir = ".";

sub beforeCommand {
  if ($curDir ne $dirStack[0]) {
    $curDir = $dirStack[0];
    print("cd $curDir\n");
  }
}

sub command {
  my ($cmd) = @_;
  beforeCommand();
  print("$cmd\n");
}

while (defined($line = <STDIN>)) {
  chomp($line);

  # check for "Entering directory"
  ($dir) = ($line =~ m/Entering directory \`(.*)\'/);
  if (defined($dir)) {
    unshift @dirStack, $dir;
    next;
  }

  # check for "Leaving directory"
  ($dir) = ($line =~ m/Leaving directory \`(.*)\'/);
  if (defined($dir)) {
    shift @dirStack;
    next;
  }

  # check for a Mozilla g++ compile line
  if ($line =~ m/^g\+\+/) {
    ($fname1, $flags, $fname2) =
      ($line =~ m/^g\+\+ -o (\S+)\.o -c (.*) (\S+)\.cpp$/);
    if (defined($fname2)) {
      if (($fname1 ne $fname2) &&
          ($fname1 ne "nsOSHelperAppService")) {
        # one special case that I've inspected, and it's harmless
        print STDERR ("warning: $fname1 doesn't match $fname2\n");
      }
      command("cpp -E -D__cplusplus $flags $fname2.cpp -o $fname1.i");
      next;
    }

    # is this a link line?  link lines never mention ".cpp"
    # (and the Mozilla sources only use that extension for C++ files)
    if ($line !~ m/\.cpp/) {
      next;     # link line
    }

    print STDERR ("warning: unmatched: $line\n");
    next;
  }

  if ($line =~ m|^gcc|) {
    # check for an OpenSSL gcc compile line
    ($flags, $fname1, $fname2) =
      ($line =~ m|^gcc (.*) -c -o (\S+).o (\S+).c$|);
    if (defined($fname2)) {
      command("cpp -E $extras $flags $fname2.c -o $fname1.i");
      next;
    }

    # check for OpenSSH gcc compile line
    ($flags, $fname1) =
      ($line =~ m|^gcc (.*) -c (\S+).c$|);
    if (defined($fname1) &&
        ($flags !~ m|-o |)) {
      command("cpp -E $extras $flags $fname1.c -o $fname1.i");
      next;
    }

    # preprocessing assembler code?
    if ($line =~ m|gcc .* \| as -o|) {
      next;
    }

    print STDERR ("warning: unmatched: $line\n");
    next;
  }
}


