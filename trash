#!/usr/bin/perl -w
# script to move a file to 'trash' instead of actually deleting it

use strict;

if (@ARGV < 1) {
  print("usage: $0 [options] file-to-delete ...\n",
        "  options:\n",
        "    -d     debug mode (echo commands)\n",
        "    -f     fake mode (don't really do anything)\n",
        "    --     stop processing options\n");
  exit(0);
}

# default options
my $debugMode = 0;
my $fakeMode = 0;

# process options
while ($ARGV[0] =~ /^-/) {
  my $a = shift(@ARGV);
  if ($a eq "-d") {
    $debugMode = 1;
  }
  elsif ($a eq "-f") {
    $fakeMode = 1;
  }
  elsif ($a eq "--") {
    last;
  }
  else {
    die("$0: unknown option $a\n");
  }
}

# directory for trash
my $trashdir = $ENV{"HOME"};
if (! -d $trashdir) {
  die("\$HOME does not refer to a directory: $trashdir\n");
}
$trashdir .= "/trash";
if (! -d $trashdir) {
  # try to create it
  if (!mkdir($trashdir)) {
    die("mkdir $trashdir: $!\n");
  }
}

# verify all arguments exist
foreach my $fname (@ARGV) {
  if (! -e $fname) {
    die("$0: $fname does not exist (stopping before doing anything)\n");
  }
}

# process arguments to delete
foreach my $fname (@ARGV) {
  # if $fname has trailing slashes, remove them
  $fname =~ s%/+$%%;

  # determine the full pathname for this file
  if ($fname !~ m%^/% ) {
    # this is a relative path.. find out where we are now
    my $wd = `pwd`;
    chomp($wd);

    # prepend that to fname
    $fname = "$wd/$fname";
    if ($debugMode) {
      print("full path: $fname\n");
    }

    # collapse any occurrences of "dir/../"
    $fname =~ s%[^/]+/\.\./%%g;
  }
  
  # At this point, $fname is an absolute path (begins with '/').

  # make sure things still make sense
  if (! -e $fname) {
    die("$0: $fname existed before but doesn't now.. ?!?! (aborting)\n");
  }

  # get the pathname part of the name
  my $path = $fname;
  $path =~ s%/[^/]*$%%;

  # create the directory into which we will move this
  my $destPath = "${trashdir}$path";
  run("mkdir -p $destPath");

  # move the file to the trash
  run("mv -f $fname $destPath");
}

exit(0);


sub run {
  my ($cmd) = @_;

  if ($debugMode) {
    print("executing: $cmd\n");
  }
  if ($fakeMode) {
    return;
  }

  my $res = system($cmd);
  if ($res != 0) {
    my $sig = $res & 0xff;
    my $code = $res >> 8;
    die("$0: command `$cmd' failed with " .
	($sig? "signal $sig" : "exit code $code") .
	" (aborting)\n");
  }
}


# EOF
