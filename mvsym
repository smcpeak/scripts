#!/bin/sh
# mvsym: move a file or directory, leaving behind a symlink to its new home
  
verbose=0
if [ "$1" = "-v" ]; then
  verbose=1
  shift
fi

if [ "$1" = "-t" ]; then                       
  echo "testing mvsym ..."
  mvsym-test | diff -c ~/scripts/mvsym-output -
  exit
fi

if [ "$2" = "" ]; then
  echo "usage: $0 [-v|-t] old-name new-name-or-dir"
  echo "  moves old-name to new-name, then creates a symlink called"
  echo "  old-name that points to new-name"
  echo "  -v: verbose"
  echo "  -t: self-test"
  exit
fi

# strip trailing slashes since they will confuse me later
src=`echo $1 | sed 's#/*$##'`
dest=`echo $2 | sed 's#/*$##'`

# debugging
diagnostic() {
  if [ "$verbose" = 1 ]; then
    echo "diagnostic:" "$@"
  fi
}

diagnostic "mvsym $src $dest"


# if destination is ".", replace it with a single explicit name
if [ "$dest" = "." ]; then
  dest=`basename "$src"`

# if destination is a directory, explicitly add the src's basename
elif [ -d "$dest" ]; then
  dest="$dest"/`basename "$src"`

fi


# if the dest was fully qualified, it's a suitable link target
if echo $dest | grep "^/" >/dev/null; then
  diagnostic "dest fully qualified"
  target="$dest"

# known: dest is relative
# if the source is in the current directory, then dest is a good
# link target, because it will have correct relative path info
elif echo $src | grep -v "/" >/dev/null; then
  diagnostic "src is in cwd"
  target="$dest"

# known: source is not in cwd
# if the source is absolute, but dest is relative (already known),
# we're in trouble
elif echo $src | grep "^/" >/dev/null; then
  echo "Can't handle an absolute source but relative dest."
  exit 2

# known: both src and dest are relative
# if source has some ".." we're still in trouble because we'd
# have to come up with the name of the directory traversed by ".."
elif echo $src | grep '\.\.' >/dev/null; then
  echo "Can't handle relative src and dest where src has '..'."
  exit 2

# known: both are relative, but src doesn't have any ".."; so
# we need to translate all directory names in src into ".." for
# use as a link target (so the link, sitting where src does now,
# will first ".." back to cwd and then be proper relative to dest)
else
  diagnostic "synthesizing ..'s ..."
  tmp=`echo "$src" | sed 's#[^/]\+/\+#../#g'`
  target=`dirname "$tmp"`/"$dest"
fi

echo mv -i "$src" "$dest"
mv -i "$src" "$dest" || exit

echo ln -s "$target" "$src"
ln -s "$target" "$src" || exit
