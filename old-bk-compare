#!/usr/bin/perl -w
# compare two bk revs in detail, by comparing their ChangeSet file contents

use strict 'subs';

if (@ARGV != 2) {
  print("usage: $0 revA revB\n");
  exit(2);
}

$revAName = $ARGV[0];
$revBName = $ARGV[1];

# The BitKeeper ChangeSet file is essentially a map from what I call
# an "entity" to a file.  An entity is like a file without a fixed
# home.  An entity is created when a file is first checked in or
# copied (via bk cp); it is named according to the initial file name
# and time.  Then as the corresponding file is changed and possibly
# renamed, the file portion changes, but the entity remains the same.

# Entities are named using a quintuple:
#
#   [0]: user who created it
#   [1]: original path/filename
#   [2]: creation time as UTC
#   [3]: creation contents checksum
#   [4]: creation key (some bk internal concept)
#
# Files are named using a quadruple:
#
#   [0]: last user to modify
#   [1]: current path/filename
#   [2]: last modification time as UTC
#   [3]: last modification contents checksum
#
# When these are packed into a string, I use '|' characters to
# separate the elements, just like BitKeeper.

# The first map (for now) just keeps track of the set of entities.
# Every entity I learn about will be mapped to 1.
%entities = ();

# Next, I have a map for the entities in the current version of the
# repository.  I need this because the "s" files can only be found
# using the current info.  This map is from entities to files.
%current = ();

# Then, maps for revA and revB, again entity quad -> file.
%revA = ();
%revB = ();


# read the three relevant ChangeSet files
%current = readChangeSet("+");
%revA = readChangeSet($revA);
%revB = readChangeSet($revB);


# examine all the entities
foreach $entity (keys(%entities)) {
  # look for changes between revA and revB
  if (!defined($revA{$entity})) {
    if (!defined($revB{$entity})) {
      # gone in both; presumably the file was added to the
      # repo after these revs existed
      next;
    }

    # present in B but not in A, must have been added
    my @fileB = extractFileInfo($revB{$entity});
    my $fileRevB = getFileRev($entity, @fileB);
    print("added   : $fieldsB[1] $fileRevB\n");
    next;
  }
  elsif (!defined($revB{$entity})) {
    # present in A but not in B; someone must have said
    # 'bk gone' between the two
    my @fileA = extractFileInfo($revA{$entity});
    my $fileRevA = getFileRev($entity, @fileA);
    print("gone    : $fieldsA[1] $fileRevA\n");
    next;
  }

  # present in both; same?
  if ($revA{$entity} eq $revB{$entity}) {
    # unchanged
    next;
  }

  # something changed; get the info about them
  my @fileA = extractFileInfo($revA{$entity});
  my $fileRevA = getFileRev($entity, @fileA);
  my @fileB = extractFileInfo($revB{$entity});
  my $fileRevB = getFileRev($entity, @fileB);

  # renamed?
  if ($fileA[1] ne $fileB[1]) {
    # modified?
    if ($fileRevA ne $fileRevB) {
      print("move+mod: $fileA[1] $fileRevA -> $fileB[1] $fileRevB\n");
    }
    else {
      print("moved   : $fileA[1] -> $fileB[1] $fileRevA\n");
    }
  }
  else {
    # modifed?
    if ($verA ne $verB) {
      my $fileRevA = getFileRev(@fileA);
      my $fileRevB = getFileRev(@fileB);
      print("modified: $fileA[5] $fileRevA -> $fileRevB\n");
    }
    else {
      # not moved or modified, print nothing

      # well, just for debugging
      #print("same    : $fileA[5]\n");
    }
  }


}


# simultaneously iterate
while (@linesA != 0 && @linesB != 0) {
  chomp($linesA[0]);
  chomp($linesB[0]);

  # split the lines into fields
  my @fieldsA = extractFields("revA", $linesA[0]);
  my @fieldsB = extractFields("revB", $linesB[0]);

  # format (inferred by looking at ChangeSet files):
  #   [0] creator user
  #   [1] original path/file name
  #   [2] original UTC
  #   [3] original checksum
  #   [4] (original?) file key, then a space, then last user to modify
  #   [5] current path/file name
  #   [6] UTC of last modification
  #   [7] checksum of last modification

  # entity descriptors
  my $entityA = $fieldsA[0]."|".$fieldsA[1]."|".$fieldsA[2]."|".$fieldsA[3];
  my $entityB = $fieldsB[0]."|".$fieldsB[1]."|".$fieldsB[2]."|".$fieldsB[3];

  # removed?
  if ($entityA lt $entityB) {
    my $fileRevA = getFileRev(@fieldsA);
    print("removed : $fieldsA[5] $fileRevA\n");
    shift @linesA;
    next;
  }

  # added?
  if ($entityA gt $entityB) {
    my $fileRevB = getFileRev(@fieldsB);
    print("added   : $fieldsB[5] $fileRevB\n");
    shift @linesB;
    next;
  }

  # file content descriptors
  my $verA = $fieldsA[6]."|".$fieldsA[7];
  my $verB = $fieldsB[6]."|".$fieldsB[7];

  # renamed?
  if ($fieldsA[5] ne $fieldsB[5]) {
    my $fileRevA = getFileRev(@fieldsA);

    # modified?
    if ($verA ne $verB) {
      my $fileRevB = getFileRev(@fieldsB);
      print("move+mod: $fieldsA[5] $fileRevA -> $fieldsB[5] $fileRevB\n");
    }
    else {
      print("moved   : $fieldsA[5] -> $fieldsB[5] $fileRevA\n");
    }
  }
  else {
    # modifed?
    if ($verA ne $verB) {
      my $fileRevA = getFileRev(@fieldsA);
      my $fileRevB = getFileRev(@fieldsB);
      print("modified: $fieldsA[5] $fileRevA -> $fileRevB\n");
    }
    else {
      # not moved or modified, print nothing
      
      # well, just for debugging
      #print("same    : $fieldsA[5]\n");
    }
  }
  
  shift @linesA;
  shift @linesB;
}

# removed at end
while (@linesA != 0) {
  my @fieldsA = extractFields("revA", $linesA[0]);
  print("removed : $fieldsA[5]\n");
  shift @linesA;
}

# added at end
while (@linesB != 0) {
  my @fieldsB = extractFields("revB", $linesB[0]);
  print("added   : $fieldsB[5]\n");
  shift @linesB;
}


# read the ChangeSet file for 'rev' into a hash; also,
# keep 'entities' up to date
sub readChangeSet {
  my ($rev) = @_;
    
  # hash to return
  %ret = ();

  if (!open(IN, "bk get -p -q -r$rev ChangeSet |")) {
    die("failed to run bk get for revision $rev\n");
  }
  my $line;
  while (defined($line = <IN>)) {
    chomp($line);

    # extract the entity and the file, which are separated
    # by a space character (cannot just split on spaces because
    # the file name might have them too ...)
    my ($entity, $file) =
      ($line =~ m/^([^|]+|[^|]+|[^|]+|[^|]+|\S+) ([^|]+|[^|]+|[^|]+|[^|]+)$/);
      #             ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^^   ^^^^^ ^^^^^ ^^^^^ ^^^^^
      #              [e0]  [e1]  [e2]  [e3] [e4]   [f1]  [f2]  [f3]  [f4]
      #                       entity                       file
    if (!defined($file)) {
      die("malformed ChangeSet line: $line\n");
    }
    
    # keep track of set of all entities
    $entities{$entity} = 1;
                          
    # build hash to return
    $ret{$entity} = $file;
  }
  if (!close(IN)) {
    die($! ? "Error closing bk get pipe: $!\n"
           : "Exit status $? from bk get\n");
  }
 
  return %ret;
}


sub extractFields {
  my ($rev, $line) = @_;

  # delimited by '|' chars
  my @fields = split(/\|/, $line);
  if (@fields != 8) {
    die("malformed $rev line: $line\n");
  }

  return @fields;
}


sub getFileRev {
  my (@fields) = @_;

  my $revLine = `bk findkey -t$fields[6] -c$fields[7] "$fields[5]"`;

  # example output: edg/src/cmd_line.c|1.71
  my ($rev) = ($revLine =~ m/\|([0-9.]+)$/);

  if (!defined($rev)) {
    print STDERR ("failed to get rev for: @fields\n");
    return "(?)";
  }

  return $rev;
}


# EOF
