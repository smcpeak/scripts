#!/usr/bin/perl -w
# front-end for running coverity tools

use strict;


sub usageError {
  my ($e) = @_;
  usage();
  die("$e\n");
}


my $platform = getPlatform();

# root of prevent install or development directory
my $HOME = getenv("HOME");
my $prevent = "$HOME/dev/objs/$platform/root";

# let PREV envvar specify
if (defined($ENV{"PREV"})) {
  $prevent = $ENV{"PREV"};
}

# data directories
my $config = "";
my $dir = "dir";
my $data = "data";

setPrevent($prevent);

# user for commits
my $user = "admin";
my $password = "coverity";

my $language = "C/C++";
my $product = `pwd`;
chomp($product);
$product =~ s,.*/,,;    # basename
my $port = "";


sub usage {
  print(<<"EOF");
usage: $0 [options] cov-command [args]

Options:
  -prev <prevdir>    installdir [$prevent]
  -c <config>        config [$config]
  --dir <dir>        intermediate data [$dir]
  -d <data>          GUI data [$data]
  --user <user>      user for commits [$user]
  --pass <pass>      password for commits [$password]
  --product <prod>   product/stream for commits [$product]
  --language <lang>  language for GUI product [$language]
  --help             print this message

EOF
}


# process command-line options
while (@ARGV > 0 && $ARGV[0] =~ m/^-/) {
  my $arg = $ARGV[0];
  shift @ARGV;

  if ($arg eq "-prev") {
    setPrevent(nextArg());
  }
  elsif ($arg eq "-c") {
    $config = nextArg();
  }
  elsif ($arg eq "--dir") {
    $dir = nextArg();
  }
  elsif ($arg eq "-d") {
    $data = nextArg();
  }
  elsif ($arg eq "--user") {
    $user = nextArg();
  }
  elsif ($arg =~ m/^--?h(elp)?$/) {
    usage();
    exit(0);
  }
  else {
    usageError("unknown option: $arg");
  }
}


# validate $prevent
if (! -d $prevent) {
  die("Not a directory: $prevent\n");
}

my $bin = "$prevent/bin";
if (! -d "$bin") {
  die("Not a directory: $bin\n");
}


# check the version
my $verString = `'$prevent/bin/cov-analyze' --ident`;
chomp($verString);
my ($verMajor, $verMinor, $verPatch) =
  ($verString =~ m/^(\d+)\.(\d+)\.(\d+)/);
if (!defined($verPatch)) {
  if ($verString =~ m/^parallel /) {
    $verMajor = 6;
    $verMinor = 0;
    $verPatch = 0;
  }
  else {
    die("malformed version string from cov-analyze --ident: $verString\n");
  }
}


# process the command
if (@ARGV == 0) {
  usageError("no command specified");
}

# pull off the primary command
my $command = $ARGV[0];
shift @ARGV;

# start building the cov-* arguments
my @covArgs = ();

my $isGUIcmd = $command =~ m/gui/ ||
               $command =~ m/db$/;

if (!$isGUIcmd) {
  push @covArgs, ("--dir", $dir);
}

if ($isGUIcmd) {
  push @covArgs, ("-d", $data);
}

if ($command =~ m/cov-commit-defects/) {
  if ($verMajor <= 4) {
    push @covArgs, ("-d", $data);
  }
}

if ($command eq "cov-build") {
  if (@ARGV == 0) {
    usageError("no build command specified");
  }
  
  if ($config) {
    push @covArgs, ("-c", $config);
  }
}

elsif ($command eq "cov-start-gui") {
  if ($port) {
    push @covArgs, ("--port", $port);
  }
}

elsif ($command eq "cov-install-gui") {
  push @covArgs, ("--password", $password,
                  "--product", $product,
                  "--language", $language);
}

elsif ($command eq "cov-commit-defects") {
  push @covArgs, ("--user", $user);

  if ($verMajor >= 5) {
    push @covArgs, ("--password", $password);
    push @covArgs, ("--stream", $product);
  }
  else {
    push @covArgs, ("--product", $product);
  }
}

elsif ($command eq "cov-analyze") {
  # nothing special at the moment
}

elsif ($command eq "find-function") {
  # nothing special at the moment
}


# build a single command line
my @cmd = ("$prevent/bin/$command", @covArgs, @ARGV);

# print and run it
print(join(' ', @cmd) . "\n");
exec(@cmd);
die("exec failed\n");


sub getenv {
  my ($var) = @_;
  my $ret = $ENV{$var};
  if (!defined($ret)) {
    $ret = "";
  }
  return $ret;
}


sub nextArg {
  if (@ARGV == 0) {
    usageError("option requires argument");
  }
  my $ret = $ARGV[0];
  shift @ARGV;
  return $ret;
}


sub setPrevent {
  my ($newPrev) = @_;
  
  $prevent = $newPrev;
  
  # look for a config
  if ($config) {
    # already set
  }
  elsif (-d "$prevent/gcc-config") {
    $config = "$prevent/gcc-config/coverity_config.xml";
  }
}

  
# get the current platform identifier as used in Prevent tarball names
sub getPlatform {
  my $proc = getProcessor();
  my $os = getOS();

  if ($os eq "linux") {
    if ($proc eq "x86_64") {
      return "linux64";
    }
    elsif ($proc eq "x86") {
      return "linux";
    }
  }

  if ($os eq "windows") {
    if ($proc eq "x86") {
      return "mingw";
    }
  }

  die("unknown combination: proc=$proc os=$os\n");
}


sub getProcessor {
  my $proc = `uname -m`;
  chomp($proc);

  if ($proc eq "x86_64") {
    return "x86_64";
  }
  elsif ($proc =~ m/^i[3456]86$/) {
    return "x86";
  }
  else {
    die("unknown processor: $proc\n");
  }
}


sub getOS {
  my $os = `uname -o`;
  chomp($os);

  if ($os =~ m/linux/i) {
    return "linux";
  }
  elsif ($os =~ m/cygwin/i) {
    return "windows";
  }
  else {
    die("unknown OS: $os\n");
  }
}


# EOF
