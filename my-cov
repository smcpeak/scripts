#!/bin/sh
# my wrapper around Prevent analysis

# directory containing the analyzer
SWAT=${SWAT:-$HOME/swat}
echo "SWAT=$SWAT"

# true if we're using Prevent 2.2 or earlier
ver22=false

# directory containing the code to analyze
SRC=${SRC:-`pwd`}

# where to put analysis results
RESULTS=$SRC
EMIT=$RESULTS/emit
OUTPUT=$RESULTS/output
DATA=$RESULTS/data
if $ver22; then
  # this was for 2.2; in 2.3 you just specify the data directory
  GUICFG=$RESULTS/covgui.xml
fi

# arg, --force-no-tty has been removed ...
ANALYZE_ARGS="--security --force --no-watchdog --debug-flags fn_names"

if [ "$1" = "" ]; then
  echo "usage: $0 <command> [args]"
  echo "  where <command> is one of:"
  echo "    build             build, generating emit directory"
  echo "    build-noclean     build w/o saying 'make clean' first"
  echo "    analyze           analyze emit, generating output"
  echo "    analyze-gdb       analyze under gdb"
  echo "    start-gui         start the GUI"
  echo "    stop-gui          stop the GUI"
  echo "    commit            commit last run's errors to the GUI database"
  echo "    find-func         find a function's model"
  echo "    print-tree        print an AST"
  echo "    prepare-parallel  prepare for parallel analysis"
  echo "    upgrade-db        upgrade db"
  exit 0
fi

cmd="$1"
shift

cd $SRC
case "$cmd" in
  make)
    runecho make clean
    runecho rm -rf $EMIT
    exec runecho $SWAT/bin/cov-build -e $EMIT -o $OUTPUT make "$@"
    ;;

  build)
    exec runecho $SWAT/bin/cov-build -e $EMIT -o $OUTPUT "$@"
    ;;

  translate)
    exec runecho $SWAT/bin/cov-translate -e $EMIT "$@"
    ;;

  analyze)
    exec runecho $SWAT/bin/cov-analyze $ANALYZE_ARGS -cxx -e $EMIT -o $OUTPUT "$@"
    ;;

  analyze-c)
    exec runecho $SWAT/bin/cov-analyze $ANALYZE_ARGS -e $EMIT -o $OUTPUT "$@"
    ;;

  analyze-gdb)
    exec runecho run-gdb $SWAT/bin/cov-analyze --no-watchdog $ANALYZE_ARGS -cxx -e $EMIT -o $OUTPUT "$@"
    ;;

  analyze-c-gdb)
    exec runecho run-gdb $SWAT/bin/cov-analyze --no-watchdog $ANALYZE_ARGS -e $EMIT -o $OUTPUT "$@"
    ;;

  make-analyze)
    runecho make clean
    runecho rm -rf $EMIT
    runecho $SWAT/bin/cov-build -e $EMIT -o $OUTPUT make "$@" || exit
    exec runecho $SWAT/bin/cov-analyze $ANALYZE_ARGS -cxx -e $EMIT -o $OUTPUT "$@"
    ;;

  start-gui)
    if $ver22; then
      exec runecho $SWAT/gui/bin/cov-start-gui -c $GUICFG "$@"
    else
      exec runecho $SWAT/gui/bin/cov-start-gui -d $DATA "$@"
    fi
    ;;

  stop-gui)
    if $ver22; then
      exec runecho $SWAT/gui/bin/cov-stop-gui -c $GUICFG "$@"
    else
      exec runecho $SWAT/gui/bin/cov-stop-gui -d $DATA "$@"
    fi
    ;;

  commit)
    if [ ! -d "$DATA" ]; then
      if $ver22; then
        runecho $SWAT/gui/bin/cov-install-gui -e $EMIT -o $OUTPUT -d $DATA \
                -c $GUICFG --password pass "$@" || exit
      else
        runecho $SWAT/gui/bin/cov-install-gui -e $EMIT -o $OUTPUT -d $DATA \
                --password pass "$@" || exit
      fi
    fi
    exec runecho $SWAT/gui/bin/cov-commit-errors -e $EMIT -o $OUTPUT -d $DATA \
                 --user admin "$@"
    ;;

  install-gui)
    if $ver22; then
      exec runecho $SWAT/gui/bin/cov-install-gui -e $EMIT -o $OUTPUT -d $DATA \
                   -c $GUICFG --password pass "$@"
    else
      exec runecho $SWAT/gui/bin/cov-install-gui -e $EMIT -o $OUTPUT -d $DATA \
                   --password pass "$@"
    fi
    ;;

  find-func|find-function)
    exec runecho $SWAT/bin/cov-find-function -e $EMIT "$@"
    ;;

  print-tree)
    exec runecho $SWAT/bin/print-tree -e $EMIT "$@"
    ;;

  prepare-parallel)
    exec runecho $SWAT/bin/cov-prepare-parallel -e $EMIT "$@"
    ;;

  upgrade-db)
    exec runecho $SWAT/gui/bin/cov-upgrade-db -d $DATA "$@"
    ;;

  preprocess)
    exec runecho $SWAT/bin/cov-preprocess -e $EMIT -o $OUTPUT "$@"
    ;;

  link)
    exec runecho $SWAT/bin/cov-link -e $EMIT "$@"
    ;;

  *)
    echo "unknown command: $cmd"
    exit 2
    ;;
esac



# EOF
