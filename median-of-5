#!/usr/bin/perl -w
# run a program, discarding its output, but measuring its
# excution time; do this 5 times

use strict;
use Time::HiRes qw( gettimeofday );

sub usage {
  print(<<"EOF");
usage: $0 [options] program [args...]

options:
  -setup 'command': specify untimed command to run before program
  -iters n        : number of iterations to run (default: 5)

EOF
}


# -------------------- command line -------------------
# command to invoke before each timed test
my $setup = "";

my $iters = 5;

while (@ARGV && $ARGV[0] =~ m/^-/) {
  my $opt = shift @ARGV;

  if ($opt eq "-setup") {
    $setup = shift @ARGV;
  }
  elsif ($opt eq "-iters") {
    $iters = shift @ARGV;
  }
  else {
    usage();
    die("unknown option: $opt\n");
  }
}

if (@ARGV == 0) {
  usage();
  die("must specify a program to run\n");
}


# ---------------------- iterations --------------------
# sequence of wallclock times in milliseconds (as floating-point)
my @results = ();

# run it $iters times
for (my $i = 1; $i <= $iters; $i++) {
  if ($setup ne "") {
    if (system($setup) != 0) {
      die("setup command failed: $setup\n");
    }
  }

  # always sync the disks before timing
  system("sync");

  # get time before running the child ($secs, $msecs)
  my @before = gettimeofday();

  # run it
  system("@ARGV >/dev/null 2>&1");

  my @after = gettimeofday();

  my $diff = ($after[0] - $before[0]) * 1000 +
             int(($after[1] - $before[1]) / 1000);

  print("$i: $diff ms\n");
  push @results, ($diff);
}

# sort the results in increasing numeric order
@results = sort {$a <=> $b} @results;
#print("sorted results: @results\n");

# select middle element
my $mid = $results[int(scalar(@results) / 2)];
print("median: $mid ms\n");


# mean average
my $sum = 0;
foreach my $r (@results) {
  $sum += $r;
}
my $mean = $sum / scalar(@results);   # yields floating-point
printf("mean  : %.2f ms\n", $mean);

# variance
my $distsqsum = 0;
foreach my $r (@results) {
  $distsqsum += ($mean - $r) * ($mean - $r);
}
my $variance = $distsqsum / scalar(@results);

my $stddev = sqrt($variance);
printf("stddev: %.2f ms\n", $stddev);


exit(0);


# EOF
